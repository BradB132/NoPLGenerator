
console("generating c++ headers");

Object classes = abstractions.classes;

String schemaNickname = schema.targetNamespace;
schemaNickname = substring(schemaNickname, lastIndexOf(schemaNickname, "/")+1);

for(int i = 0; i < classes.count; i++)
{
	Object class = classes[i];
	String name = class.className;
	Boolean hasParentClass = (class.parentClassName != NULL);
	
	outputToFile("./c++_output/"+name+".h");

//put a comment at the top with some metadata about this file
<?//
//  ?>#name;<?.h
//  ?>#schemaNickname;<?
//
//  Created by NoPLGenerator on ?>#format("%/%/%", (Number)month(), (Number)dayOfTheMonth(), (String)substring((String)year(), 2));<?.
//  Copyright (c) ?>#year();<? Brad Bambara. All rights reserved.
//

?>
//wrap this class definition with a precompiler macro
<?#ifndef __?>#toUpper(name);<?_H__
#define __?>#toUpper(name);<?_H__

?>
//include the parent class if we have one
if(hasParentClass)
{
	<?#include "?>#class.parentClassName;<?"

?>
}

<?class ?>#name;

if(hasParentClass)
{
	//declare this class as the subclass of the parent class
	<? : public ?>#class.parentClassName;
}
<?
{
public:

	?>#name;<?();
	~?>#name;<?();
?>

Object attributes = class.attributes;

//generate accessor functions if we have attributes
if(attributes.count > 0)
{
<?
?>
	for(int j = 0; j < attributes.count; j++)
	{
		Object attr = attributes[j];
<?	virtual ?>#valueForKey((String)attr.type);<? get?>#capitalize((String)attr.name);<?();
?>
	}
}

//declare any attributes we have
if(attributes.count > 0)
{
<?
protected:

?>
	for(int j = 0; j < attributes.count; j++)
	{
		Object attr = attributes[j];
<?	?>#valueForKey((String)attr.type);<? ?>#attr.name;<?;
?>
	}
}

<?
};

#endif //end __?>#toUpper(name);<?_H__
?>
	
}